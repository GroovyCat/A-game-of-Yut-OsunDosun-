#pragma once
#include <stdio.h>
#include <string.h>
#include <stdlib.h> // Rand 함수를 위한 해더파일
#include <windows.h> // 화면 Clear를 위한 해더파일
#include <time.h> // Srand를 사용하기 위한 해더파일
#include <conio.h> // getch를 사용하기 위한 해더파일

// *************************** 컬러 사용하기 Define 값 ********************************* //

#define col GetStdHandle(STD_OUTPUT_HANDLE) // 콘솔창의 핸들정보 받기
#define BLACK SetConsoleTextAttribute(col, 0x0000); //검정색
#define GRAY SetConsoleTextAttribute(col, 0x0007); //밝은 회색
#define RED SetConsoleTextAttribute(col, 0x000c); //빨간색
#define BLUE SetConsoleTextAttribute(col, 0x0001 | 0x0008); //파란색
#define HIGH SetConsoleTextAttribute(col, 0x00a); // 연두색
#define WHITE SetConsoleTextAttribute(col,0x000f); //하얀색
#define SKY SetConsoleTextAttribute(col, 0x000b); // 하늘색
#define YEL SetConsoleTextAttribute(col, 0x000e); // 노란색
#define HIG SetConsoleTextAttribute(col, 0x000d); // 형광
#define GOLD SetConsoleTextAttribute(col, 0x0006); //  금색
#define JAJU SetConsoleTextAttribute(col, 0x0005); // 자주색
#define PII SetConsoleTextAttribute(col, 0x0004); // 피색
#define GREEN SetConsoleTextAttribute(col, 0x0002); // 녹색
#define VIO SetConsoleTextAttribute(col, 0x0001 | 0x0008 | 0x000c); // 보라색

// ************************* 커서 숨기기 매크로 ************************************** //
enum { HIDDEN, SHOW };

// **************************** 방향키 아스키코드값 *************************** //
#define LEFT 75
#define RIGHT 77
#define UP 72
#define DOWN 80
#define Enter 13 // 엔터 값
#define ESC 27



// ********************************* 처음 시작 화면! *************************** //
int startMenu(); // 처음 시작 화면 


				 // ************************ System 함수 ******************************* //
void gotoxy(int, int); // x축 y축 이동시켜주는 함수
void delay(clock_t wait); // 딜레이 함수 시간 몇초를 대기하여라.
void color(unsigned short color); // 랜덤 컬러를 주기 위한 함수 
void CursorView(char show); // 커서를 숨기거나 보여준다.

int startMenu()
{
	char Game[17][17] = { { 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 }, // 처음 화면 
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,1,0,50,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,51,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,52,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 } };

	int i, j; // 반복제어변수
	int randcolor = 0; // 램덤컬러 주기
	int x = 2; // 화살표의 처음 좌표
	int y = 2; // 화살표의 처음 좌표 

	system("mode con lines=29 cols=79");
	CursorView(HIDDEN);

	while (1)
	{
		gotoxy(52, 18);
		WHITE;
		printf("■");
		GRAY;

		randcolor = rand() % 6 + 1; // 1~6 까지의 숫자를 줌

		switch (randcolor) // 랜덤함수에서 받은 수를 출력함
		{
		case 1: RED;
			break;
		case 2: BLUE;
			break;
		case 3:WHITE;
			break;
		case 4:GOLD;
			break;
		case 5: VIO;
			break;
		case 6: YEL;
			break;
		} // 스위치 케이스 끝
		gotoxy(25, 5);
		printf("★  오   순   도   순   ★");
		GRAY;

		for (i = 0; i < sizeof(Game) / sizeof(Game[0]); i++)  // 반복문
		{
			gotoxy(20, i + 7);
			for (j = 0; j < sizeof(Game[0]); j++)
			{
				if (Game[i][j] == 50)
				{
					printf(" 1.    게임 시작      ");
				}
				else if (Game[i][j] == 51)
				{
					printf(" 2.    게임 설명      ");
				}
				else if (Game[i][j] == 52)
				{
					printf(" 3.    게임 종료      ");
				}
				else if (Game[i][j] == 5)
				{
					WHITE;
					printf("■");
					GRAY;
				}
				else if (Game[i][j] == 1)
				{
					SKY;
					printf("▶");
					GRAY;
				}
				else if (Game[i][j] == 0)
				{
					printf("  ");
				}
			} // j 포문 끝

			printf("\n");
		} // i 포문 끝
		if (_kbhit())
		{
			char move = 0; // 움직임 제어 변수
			int Number = 0; // 게임 선택 변수
			move = _getch();
			switch (move) // 무브를 판단하여 작동 위 / 아래
			{
			case UP:
				if (x > 3)
				{
					if (Game[x - 1][y] != 2) {
						if (Game[x - 1][y] == 0) {
							Game[x][y] = 0;
							x = x - 4;  //4칸씩 이동
							Game[x][y] = 1;
						}
					} // if문 끝
				}
				break;
			case DOWN:
				if (x < 10)
				{
					if (Game[x + 1][y] != 2) {
						if (Game[x + 2][y] == 0) {
							Game[x][y] = 0;
							x = x + 4; //4칸씩 이동
							Game[x][y] = 1;
						}
					} // if문 끝 
				}
				break;
			case Enter:
				Number = x;
				break;
			} // 특수키 스위치 케이스문 끝

			if (move == Enter)
			{
				return Number;
				break;
			} // 엔터를 누르면 Number값을 리턴 받고 종료.
		} // 이프 Kbhit 문 종료
	} // 무한 반복문 종료
} // 메인함수 끝


void gotoxy(int x, int y) // x축 y축 이동시켜주는 함수
{
	COORD pos = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

void color(unsigned short color) // 무작위 컬러 만들기위한 함수
{
	HANDLE hCon = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hCon, color);
}

void CursorView(char show) // 커서 숨기기 / 보이기 
{
	HANDLE hConsole;
	CONSOLE_CURSOR_INFO ConsoleCursor;

	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	ConsoleCursor.bVisible = show;
	ConsoleCursor.dwSize = 1;

	SetConsoleCursorInfo(hConsole, &ConsoleCursor);
}


void delay(clock_t wait)
{
	//wait ms 만큼 대기 1000 = 1초
	clock_t goal;
	goal = wait + clock();
	while (goal > clock());
}

void yut_b()
{
	int n;
	n = yutBoard();

}

int yutBoard()
{
	char board[60][60] =
	{ { 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 }, // 윷놀이 화면
	{ 5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5 },
	{ 5,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5 },
	{ 5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,5,6,5,4,4,4,4,4,5,4,4,4,4,4,5,6,5 },
	{ 5,5,5,3,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,3,5,5,5,5,5,6,5,4,5,5,5,4,5,4,5,5,5,4,5,6,5 },
	{ 5,5,5,3,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,3,5,5,5,5,5,6,5,4,5,0,5,4,5,4,5,0,5,4,5,6,5 },
	{ 5,4,4,4,4,4,5,4,0,0,0,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,0,0,0,4,5,4,4,4,4,4,5,5,5,6,5,4,5,5,5,4,5,4,5,5,5,4,5,6,5 },
	{ 5,4,0,0,0,4,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,4,0,0,0,4,5,5,5,6,5,4,5,5,5,4,5,4,5,5,5,4,5,6,5 },
	{ 5,4,4,4,4,4,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,4,4,4,4,4,5,5,5,6,5,4,5,0,5,4,5,4,5,0,5,4,5,6,5 },
	{ 5,5,5,3,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,6,5,4,5,5,5,4,5,4,5,5,5,4,5,6,5 },
	{ 5,5,5,3,5,5,5,5,5,5,5,5,5,4,0,0,0,4,5,5,5,5,5,5,4,0,0,0,4,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,6,5,4,4,4,4,4,5,4,4,4,4,4,5,6,5 },
	{ 5,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5 },
	{ 5,4,0,0,0,4,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,4,0,0,0,4,5,5,5,6,5,4,4,4,4,4,5,4,4,4,4,4,5,6,5 },
	{ 5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,6,5,4,5,5,5,4,5,4,5,5,5,4,5,6,5 },
	{ 5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,0,0,0,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,6,5,4,5,0,5,4,5,4,5,0,5,4,5,6,5 },
	{ 5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,6,5,4,5,5,5,4,5,4,5,0,5,4,5,6,5 },
	{ 5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,6,5,4,5,5,5,4,5,4,5,0,5,4,5,6,5 },
	{ 5,4,0,0,0,4,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,4,0,0,0,4,5,5,5,6,5,4,5,0,5,4,5,4,5,0,5,4,5,6,5 },
	{ 5,4,4,4,4,4,5,5,5,5,5,5,5,4,0,0,0,4,5,5,5,5,5,5,5,4,0,0,0,4,5,5,5,5,5,5,4,4,4,4,4,5,5,5,6,5,4,5,5,5,4,5,4,5,5,5,4,5,6,5 },
	{ 5,5,5,3,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,5,3,5,5,5,5,5,6,5,4,4,4,4,4,5,4,4,4,4,4,5,6,5 },
	{ 5,5,5,3,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,3,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5 },
	{ 5,4,4,4,4,4,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5 },
	{ 5,4,0,0,0,4,5,4,0,0,0,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,4,0,0,0,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,4,4,4,4,4,5,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,0,0,0,4,5,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5 },
	{ 5,5,5,3,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,5,5,5,3,5,5,5,5,5,6,5,7,5,5,5,8,5,5,5,6,5 },
	{ 5,5,5,3,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,3,5,5,5,5,5,6,5,0,0,0,5,5,5,0,0,0,5,5,5,6,5 },
	{ 5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,5,6,5,0,0,0,5,5,5,0,0,0,5,5,5,6,5 },
	{ 5,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,3,3,4,0,0,0,4,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5 },
	{ 5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	};
	int i, j; // 반복제어변수
	system("mode con lines=61 cols=128");// 창 크기 line = y축, cols = x축, line은 -1 크기 출력
	CursorView(HIDDEN);
	system("cls");
	int k = 0;

	while (k < 1)
	{
		for (i = 0; i < sizeof(board) / sizeof(board[0]); i++) { // 반복문
			for (j = 0; j < sizeof(board[0]); j++)
			{
				if (board[i][j] == 9)
				{
					printf("입력칸 :");
				}
				else if (board[i][j] == 8)
				{
					printf("도  착");
				}
				else if (board[i][j] == 7)
				{
					printf("대  기");
				}
				else if (board[i][j] == 6)
				{
					WHITE;
					printf("○");
					GRAY;
				}
				else if (board[i][j] == 5)
				{
					WHITE;
					printf("■");
					GRAY;
				}
				else if (board[i][j] == 4)
				{
					WHITE;
					printf("□");
					GRAY;
				}
				else if (board[i][j] == 3)
				{
					BLUE;
					printf("＠");
				}
				else if (board[i][j] == 2)
				{
					printf("나의챗 :");
				}
				else if (board[i][j] == 1)
				{
					printf("상대챗 :");
				}
				else if (board[i][j] == 0)
				{
					printf("  ");
				}
			} // j 포문 끝
			printf("\n");
		}
		k++;
	}
	return 0;
}

int explain() {
	char ex[25][40] = {
		{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 }, // 게임 설명 화면
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,1,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,4,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,7,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,8,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	};

	int i, j; // 반복제어변수
	int randcolor = 0; // 랜덤컬러 주기
	int x = 17; // x좌표 초기화 변수

	system("mode con lines=35 cols=115");
	CursorView(HIDDEN);

	while (1)
	{
		gotoxy(49, 4);
		GOLD;
		printf("★  게   임   설   명   ★");
		GRAY;

		for (i = 0; i < sizeof(ex) / sizeof(ex[0]); i++)  // 반복문
		{
			gotoxy(20, i + 6);
			for (j = 0; j < sizeof(ex[0]); j++)
			{
				if (ex[i][j] == 1)
				{
					SKY;
					printf(" 1. 사용자가 입력칸에 run을 입력하면 윷이 던지게 된다.");
					WHITE;
				}
				else if (ex[i][j] == 2)
				{
					SKY;
					printf(" 2. 윷의 결과에 따라 말이 움직인다. ");
					WHITE;
				}
				else if (ex[i][j] == 3)
				{
					RED;
					printf("(도, 개, 걸, 윷, 모)");
					WHITE;
				}
				else if (ex[i][j] == 4)
				{
					SKY;
					printf(" 3. 말이 각 모서리에 위치하면 가운데 방향으로 이동이 가능하다.");
					WHITE;
				}
				else if (ex[i][j] == 5)
				{
					randcolor = rand() % 4 + 1; // 1~4 까지의 숫자를 줌

					switch (randcolor) // 랜덤함수에서 받은 수를 출력함
					{
					case 1: RED;
						break;
					case 2: BLUE;
						break;
					case 3: GOLD;
						break;
					case 4: VIO;
						break;
					} // 스위치 케이스 끝
					printf("■");
				}
				else if (ex[i][j] == 6)
				{
					SKY;
					printf(" 4. 말은 각 4개씩 가지고 시작한다.");
					WHITE;
				}
				else if (ex[i][j] == 7)
				{
					SKY;
					printf(" 5. 한 지점에 같은 말이 2개가 있으면 업을 수 있다.");
					WHITE;
				}
				else if (ex[i][j] == 8)
				{
					SKY;
					printf(" 6. 같은 지점에 상대방 말이 있으면 말을 제거할 수 있다. ");
					WHITE;
				}
				else if (ex[i][j] == 9)
				{
					SKY;
					printf(" 7. 뒷도(back)가 나오면 한칸 뒤로 이동한다. ");
					WHITE;
				}
				else if (ex[i][j] == 10)
				{
					SKY;
					printf(" 8. 4개의 말이 도착하면 ");
					WHITE;
				}
				else if (ex[i][j] == 11)
				{
					RED;
					printf("승리!!");
					WHITE;
				}
				else if (ex[i][j] == 12)
				{
					WHITE;
					printf("뒤로 이동 ");
				}
				else if (ex[i][j] == 0)
				{
					printf("  ");
				}
			} // j 포문 끝

			printf("\n");
		} // i 포문 끝
		if (_kbhit()) {
			char move = 0;
			int Number = 0; // 게임 선택 변수
			move = _getch();
			switch (move) {
			case Enter:
				Number = x;
				break;
			} // 특수키 스위치 케이스문 끝

			if (move == Enter)
			{
				break;
			}
		}
	}
}